/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.MovieRepository;
import hr.algebra.dal.PersonRepositry;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Movie;
import hr.algebra.model.Person;
import hr.algebra.model.PersonTransferable;
import hr.algebra.utils.MessageUtils;
import java.awt.EventQueue;
import java.awt.datatransfer.Transferable;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;

/**
 *
 * @author HT-ICT
 */
public class JoinPersonMoviePanel extends javax.swing.JPanel {

    /**
     * Creates new form JoinPersonMoviePanel
     */
    private final DefaultListModel<Movie> movieModel = new DefaultListModel<>();

    private final DefaultListModel<Person> allActorsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> ActorsModel = new DefaultListModel<>();
    private MovieRepository repository;
    private PersonRepositry personRepository;

    public JoinPersonMoviePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tfFilter = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listMovies = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        pnlHide = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listAllActors = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listActors = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tfFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfFilterKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel1.setText("Filter");

        listMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMoviesMouseClicked(evt);
            }
        });
        listMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                listMoviesKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(listMovies);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel3.setForeground(java.awt.Color.red);
        jLabel3.setText("Select movie");

        jScrollPane3.setViewportView(listAllActors);

        jLabel4.setText("All actors");

        jScrollPane2.setViewportView(listActors);

        jLabel2.setText("Selected Movie acotrs");

        javax.swing.GroupLayout pnlHideLayout = new javax.swing.GroupLayout(pnlHide);
        pnlHide.setLayout(pnlHideLayout);
        pnlHideLayout.setHorizontalGroup(
            pnlHideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHideLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlHideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 340, Short.MAX_VALUE)
                .addGroup(pnlHideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnlHideLayout.setVerticalGroup(
            pnlHideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHideLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(pnlHideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlHideLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tfFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 941, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlHide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 69, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tfFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(pnlHide, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tfFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfFilterKeyReleased
        loadMovieModel();
    }//GEN-LAST:event_tfFilterKeyReleased

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown

    private void listMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listMoviesKeyReleased
        try {
            loadActorsModel();
        } catch (Exception ex) {
            Logger.getLogger(JoinPersonMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_listMoviesKeyReleased

    private void listMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMoviesMouseClicked
        try {
            loadActorsModel();
        } catch (Exception ex) {
            Logger.getLogger(JoinPersonMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_listMoviesMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<Person> listActors;
    private javax.swing.JList<Person> listAllActors;
    private javax.swing.JList<Movie> listMovies;
    private javax.swing.JPanel pnlHide;
    private javax.swing.JTextField tfFilter;
    // End of variables declaration//GEN-END:variables
    private void init() {
        try {
            initRepository();
            loadMovieModel();
            loadAllAcotrModel();
            initDragNDrop();
        } catch (Exception ex) {
            Logger.getLogger(JoinPersonMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadMovieModel() {
        listMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listMovies.setSelectedIndex(0);
        new Thread(() -> {
            try {
                movieModel.clear();
                repository.select().stream().filter(movie -> {
                    boolean ok = true;
                    ok &= movie.getTitle().toLowerCase().trim().startsWith(tfFilter.getText().trim());
                    return ok;
                }).forEach(movieModel::addElement);
                EventQueue.invokeLater(() -> {
                    listMovies.setModel(movieModel);
                });
            } catch (Exception ex) {
                MessageUtils.showErrorMessage("Error", "Can't load movies.");
                Logger.getLogger(JoinPersonMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.<MovieRepository>getRepository();
        personRepository = RepositoryFactory.<PersonRepositry>getRepository();
    }

    private void loadAllAcotrModel() throws Exception {
        try {
            allActorsModel.clear();
            List<Person> people;
            people = personRepository.selectActors();
            people.addAll(personRepository.selectDirectors());
            people.forEach(allActorsModel::addElement);
            SwingUtilities.invokeLater(() -> {
                listAllActors.setModel(allActorsModel);
            });
        } catch (Exception ex) {
            Logger.getLogger(JoinPersonMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadActorsModel() throws Exception {
        new Thread(() -> {
            try {
                ActorsModel.clear();
                personRepository.selectActors(((Movie) listMovies.getSelectedValue()).getId()).forEach(ActorsModel::addElement);
                EventQueue.invokeLater(() -> {
                    listActors.setModel(ActorsModel);
                });
            } catch (Exception ex) {
                Logger.getLogger(JoinPersonMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();
    }

    private void initDragNDrop() {
        listAllActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        listAllActors.setDragEnabled(true);
        listAllActors.setTransferHandler(new ExportTransferHandler());

        listActors.setDropMode(DropMode.ON);
        listActors.setTransferHandler(new ImportTransferHandler());
    }

    private class ExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(listAllActors.getSelectedValue());
        }

    }

    private class ImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Person add = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);
                personRepository.create(((Movie) listMovies.getSelectedValue()).getId(), Arrays.asList(add));
                loadActorsModel();
                return true;

            } catch (Exception ex) {
                Logger.getLogger(JoinPersonMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }

    }

}
