/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.algebra;

import hr.algebra.dal.MovieRepository;
import hr.algebra.dal.PersonRepositry;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.AbstarctTableModel;
import hr.algebra.model.Genre;
import hr.algebra.model.Movie;
import hr.algebra.model.Person;
import hr.algebra.model.PersonTransferable;
import hr.algebra.utils.FileUtils;
import hr.algebra.utils.IconUtils;
import hr.algebra.utils.MessageUtils;
import java.awt.EventQueue;
import java.awt.datatransfer.Transferable;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.TransferHandler;
import javax.swing.text.JTextComponent;

/**
 *
 * @author HT-ICT
 */
public class EditMoviePanel extends javax.swing.JPanel {

    /**
     * Creates new form UserPanel
     */
    private static final String DIR = "assets";

    private List<JTextComponent> validationFields;
    private List<JLabel> errorLabels;

    private MovieRepository repository;
    private PersonRepositry personRepository;
    private AbstarctTableModel movieTableModel;

    private final DefaultListModel<Person> movieAcotrsModel = new DefaultListModel<>();
    private final DefaultListModel<Person> allActorsModel = new DefaultListModel<>();

    private final Set<Person> actors = new TreeSet<>();
    private final Set<Person> allActors = new TreeSet<>();

    private Movie selectedMovie;

    public EditMoviePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        menuEditMovie = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        lbErrorPosterPath = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfStart = new javax.swing.JTextField();
        lbErrorPublishedDate = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lbErrorDescription = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        spDuration = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        cbGnere = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        lbErrorStart = new javax.swing.JLabel();
        tfPublishedDate = new javax.swing.JTextField();
        lbPoster = new javax.swing.JLabel();
        lbErrorTitle = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        tfPosterPath = new javax.swing.JTextField();
        btnChoose = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbMovies = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        lbErrorOriginalName = new javax.swing.JLabel();
        tfOriginalName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsAllActors = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        cbDirector = new javax.swing.JComboBox<>();
        lbErrorAcotrs = new javax.swing.JLabel();

        menuEditMovie.setMnemonic('M');
        menuEditMovie.setText("Movie");
        jMenuBar1.add(menuEditMovie);

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Title:");

        lbErrorPosterPath.setForeground(java.awt.Color.red);

        jLabel3.setText("Published date:");

        tfStart.setName("Start"); // NOI18N

        lbErrorPublishedDate.setForeground(java.awt.Color.red);

        jLabel5.setText("Description:");

        lbErrorDescription.setForeground(java.awt.Color.red);

        taDescription.setColumns(20);
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        jScrollPane1.setViewportView(taDescription);

        jLabel7.setText("Duration:");

        spDuration.setModel(new javax.swing.SpinnerNumberModel(45, 45, 300, 1));
        spDuration.setToolTipText("");

        jLabel9.setText("Genre:");

        jLabel11.setText("Original name:");

        lbErrorStart.setForeground(java.awt.Color.red);

        tfPublishedDate.setName("Date"); // NOI18N

        lbPoster.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/defaultPoster.JPG"))); // NOI18N
        lbPoster.setText("jLabel13");
        lbPoster.setPreferredSize(new java.awt.Dimension(351, 466));

        lbErrorTitle.setForeground(java.awt.Color.red);

        jLabel15.setText("Poster path:");

        tfPosterPath.setEditable(false);

        btnChoose.setText("Choose");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        tbMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMoviesMouseClicked(evt);
            }
        });
        tbMovies.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tbMoviesKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbMovies);

        btnDelete.setBackground(java.awt.Color.red);
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lbErrorOriginalName.setForeground(java.awt.Color.red);

        jLabel12.setText("Start");

        jLabel14.setText("Actors");

        lsAllActors.setName("b"); // NOI18N
        jScrollPane3.setViewportView(lsAllActors);

        lsActors.setName("a"); // NOI18N
        jScrollPane4.setViewportView(lsActors);

        jLabel16.setText("People");

        jLabel17.setText("Director");

        lbErrorAcotrs.setForeground(java.awt.Color.red);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfTitle)
                            .addComponent(jScrollPane1)
                            .addComponent(tfStart)
                            .addComponent(tfPublishedDate)
                            .addComponent(tfOriginalName)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(spDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbGnere, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(cbDirector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lbErrorAcotrs, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbErrorDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbErrorPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbErrorTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbErrorOriginalName, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbErrorStart, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfPosterPath, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lbPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbErrorPosterPath, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(94, 94, 94))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbErrorTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbErrorPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbErrorDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbGnere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spDuration, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfOriginalName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lbErrorOriginalName, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tfStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cbDirector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(lbErrorAcotrs, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lbErrorStart, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 57, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbErrorPosterPath, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbPoster, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAdd)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnUpdate)
                                    .addComponent(btnDelete)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfPosterPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnChoose))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        new Thread(()->{
        init();
        }).start();
    }//GEN-LAST:event_formComponentShown

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        File file = FileUtils.uploadFile("Images", "jpeg", "jpg", "png");
        if (file == null) {
            return;
        }
        tfPosterPath.setText(file.getAbsolutePath());
        setIcon(lbPoster, file);
    }//GEN-LAST:event_btnChooseActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (formValid()) {
            try {
                String path = uploadPicture();
                Movie movie = new Movie(
                        tfTitle.getText().trim(),
                        LocalDateTime.parse(tfPublishedDate.getText().trim()),
                        taDescription.getText().trim(),
                        tfOriginalName.getText().trim(),
                        (Person) cbDirector.getSelectedItem(),
                        new ArrayList<>(actors),
                        (int) spDuration.getModel().getValue(),
                        (Genre) cbGnere.getSelectedItem(),
                        path,
                        LocalDate.parse(tfStart.getText().trim()));
                repository.create(movie);
                movieTableModel.setMovies(repository.select());
                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to add movie.");
            }

        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose movie to update");
            return;
        }
        if (formValid()) {
            try {

                if (!tfPosterPath.getText().trim().equals(selectedMovie.getPoster())) {
                    if (selectedMovie.getPoster() != null) {
                        Files.deleteIfExists(Paths.get(selectedMovie.getPoster()));
                    }
                    String localPicturePath = uploadPicture();
                    selectedMovie.setPoster(localPicturePath);
                }

                selectedMovie.setTitle(tfTitle.getText().trim());
                selectedMovie.setPublishedDate(LocalDateTime.parse(tfPublishedDate.getText().trim()));
                selectedMovie.setDescription(taDescription.getText().trim());
                selectedMovie.setOriginalName(tfOriginalName.getText().trim());
                selectedMovie.setDuration((int) spDuration.getModel().getValue());
                selectedMovie.setGenre((Genre) cbGnere.getSelectedItem());
                selectedMovie.setStart(LocalDate.parse(tfStart.getText().trim()));
                selectedMovie.setDirector((Person) cbDirector.getSelectedItem());
                selectedMovie.setActors(new ArrayList<>(actors));
                repository.update(selectedMovie.getId(), selectedMovie);
                movieTableModel.setMovies(repository.select());
                clearForm();

            } catch (Exception e) {
                Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, e);
                MessageUtils.showErrorMessage("Error", "Unable to update movie!");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (selectedMovie == null) {
            MessageUtils.showInformationMessage("Wrong operation", "Please choose movie to delete");
            return;
        }
        if (MessageUtils.showConfirmDialog(
                "Delete movie",
                "Do you really want to delete movie?") == JOptionPane.YES_OPTION) {
            try {
                if (selectedMovie.getPoster() != null) {
                    Files.deleteIfExists(Paths.get(selectedMovie.getPoster()));
                }
                repository.delete(selectedMovie.getId());
                movieTableModel.setMovies(repository.select());
                clearForm();
            } catch (Exception ex) {
                Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to delete movie!");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tbMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMoviesMouseClicked
        try {
            clearForm();
            showMovie();
        } catch (Exception ex) {
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tbMoviesMouseClicked

    private void tbMoviesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tbMoviesKeyReleased
        try {
            clearForm();
            showMovie();
        } catch (Exception ex) {
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tbMoviesKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<Person> cbDirector;
    private javax.swing.JComboBox<Genre> cbGnere;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lbErrorAcotrs;
    private javax.swing.JLabel lbErrorDescription;
    private javax.swing.JLabel lbErrorOriginalName;
    private javax.swing.JLabel lbErrorPosterPath;
    private javax.swing.JLabel lbErrorPublishedDate;
    private javax.swing.JLabel lbErrorStart;
    private javax.swing.JLabel lbErrorTitle;
    private javax.swing.JLabel lbPoster;
    private javax.swing.JList<Person> lsActors;
    private javax.swing.JList<Person> lsAllActors;
    private javax.swing.JMenu menuEditMovie;
    private javax.swing.JSpinner spDuration;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tbMovies;
    private javax.swing.JTextField tfOriginalName;
    private javax.swing.JTextField tfPosterPath;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfStart;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initValidation();
            initRepository();
            initTable();
            initGenre();
            initAllActors();
            loadAllActorsModel();
            loadDirectorsModel();
            initDragAndDrop();
        } catch (Exception ex) {
            MessageUtils.showErrorMessage("Error", "Unable to laod.");
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(1);
        }

    }

    private void initValidation() {
        validationFields = Arrays.asList(tfTitle, tfPublishedDate, tfPosterPath, taDescription, tfOriginalName, tfStart, tfPosterPath);
        errorLabels = Arrays.asList(lbErrorTitle, lbErrorPublishedDate, lbErrorPosterPath, lbErrorDescription, lbErrorOriginalName, lbErrorStart, lbErrorPosterPath);
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.<MovieRepository>getRepository();
        personRepository = RepositoryFactory.<PersonRepositry>getRepository();
    }

    private void initTable() throws Exception {
        tbMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbMovies.setAutoCreateRowSorter(true);
        tbMovies.setRowHeight(25);
        new Thread(() -> {
            try {
                movieTableModel = new AbstarctTableModel(repository.select(), tbMovies);
            } catch (Exception ex) {
                Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            EventQueue.invokeLater(() -> {
                tbMovies.setModel(movieTableModel);
            });
        }).start();
    }

    private void loadAllActorsModel() throws Exception {

        new Thread(() -> {
            System.out.println("5565");
            allActorsModel.clear();
            allActors.forEach(allActorsModel::addElement);
            EventQueue.invokeLater(() -> {
                lsAllActors.setModel(allActorsModel);
            });
        }).start();

    }

    private void initAllActors() throws Exception {
        List<Person> people = personRepository.selectActors();
        people.addAll(personRepository.selectDirectors());
        allActors.addAll(people);

    }

    private void loadDirectorsModel() throws Exception {
        cbDirector.setModel(new DefaultComboBoxModel(allActors.toArray()));
    }

    private void loadActorsModel() throws Exception {

        new Thread(() -> {
            movieAcotrsModel.clear();
            actors.forEach(movieAcotrsModel::addElement);
            EventQueue.invokeLater(() -> {
                lsActors.setModel(movieAcotrsModel);
            });
        }).start();
    }

    private void initGenre() {
        cbGnere.setModel(new DefaultComboBoxModel<>(Genre.values()));
    }

    private void initDragAndDrop() {
        lsAllActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllActors.setDragEnabled(true);
        lsAllActors.setDropMode(DropMode.ON);
        lsAllActors.setTransferHandler(new ImportExportTransferHandler());

        lsActors.setDropMode(DropMode.ON);
        lsActors.setTransferHandler(new ImportExportTransferHandler());
        lsActors.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsActors.setDragEnabled(true);
    }

    private void showMovie() {
        int selectedRow = tbMovies.getSelectedRow();
        int rowIndex = tbMovies.convertRowIndexToModel(selectedRow);
        int id = (int) movieTableModel.getValueAt(rowIndex, 0);

        try {
            Optional<Movie> optionalMovie = repository.select(id);
            if (optionalMovie.isPresent()) {
                selectedMovie = optionalMovie.get();
                fillform(selectedMovie);
            }
        } catch (Exception ex) {
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void fillform(Movie movie) throws Exception {
        tfTitle.setText(movie.getTitle());
        tfPublishedDate.setText(movie.getPublishedDate().format(Movie.DATE_FORMATTER));
        taDescription.setText(movie.getDescription());
        tfOriginalName.setText(movie.getOriginalName());
        tfStart.setText(movie.getStart().format(Movie.DATE_FORMATTER_START));
        spDuration.setValue(movie.getDuration());
        cbGnere.getModel().setSelectedItem(movie.getGenre());
        cbDirector.getModel().setSelectedItem(movie.getDirector());
        actors.addAll(movie.getActors());
        loadActorsModel();
        allActors.removeAll(movie.getActors());
        loadAllActorsModel();
        if (movie.getPoster() != null) {
            tfPosterPath.setText(movie.getPoster());
            setIcon(lbPoster, new File(movie.getPoster()));
        }

    }

    private void setIcon(JLabel lbPoster, File file) {
        try {
            lbPoster.setIcon(IconUtils.createIcon(file, lbPoster.getWidth(), lbPoster.getHeight()));
        } catch (Exception ex) {
            Logger.getLogger(EditMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            lbPoster.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/defaultPoster.jpg"))); // NOI18N
            MessageUtils.showErrorMessage("Error", "Broken image.");
        }
    }

    private boolean formValid() {
        boolean ok = true;
        for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "X" : "");
            if ("Date".equals(validationFields.get(i).getName())) {
                try {
                    LocalDateTime.parse(validationFields.get(i).getText().trim(), Movie.DATE_FORMATTER);
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    errorLabels.get(i).setText("X");
                    ok = false;
                }

            }
            if ("Start".equals(validationFields.get(i).getName())) {
                try {
                    LocalDate.parse(validationFields.get(i).getText().trim(), Movie.DATE_FORMATTER_START);
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    errorLabels.get(i).setText("X");
                    ok = false;
                }

            }

        }
        if (lsActors.getModel().getSize() == 0) {
            lbErrorAcotrs.setText("X");
            ok = false;
        } else {
            lbErrorAcotrs.setText("");
        }
        return ok;
    }

    private String uploadPicture() throws IOException {
        String picturePath = tfPosterPath.getText().trim();
        String ext = picturePath.substring(picturePath.lastIndexOf("."));
        String pictureName = UUID.randomUUID() + ext;
        String localPicturePath = DIR + File.separator + pictureName;
        FileUtils.copy(picturePath, localPicturePath);
        return localPicturePath;
    }

    private void clearForm() throws Exception {
        validationFields.forEach(vf -> vf.setText(""));
        errorLabels.forEach(el -> el.setText(""));
        spDuration.setValue(((SpinnerNumberModel) spDuration.getModel()).getMinimum());
        cbGnere.setSelectedIndex(0);
        cbDirector.setSelectedIndex(0);
        movieAcotrsModel.clear();
        actors.clear();
        initAllActors();
        loadAllActorsModel();
        lsAllActors.clearSelection();
        lbPoster.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/defaultPoster.jpg"))); // NOI18N
        selectedMovie = null;
    }

    private class ImportExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return MOVE;
        }

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(((JList<Person>) c).getSelectedValue());
        }

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(JComponent c, Transferable t) {
            Transferable transferable = t;
            try {
                Person add = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);
                if (actors.add(add)) {
                    loadActorsModel();
                    ((DefaultListModel<Person>) lsAllActors.getModel()).removeElement(add);
                    return true;
                }
                if (((JList<Person>) c) != lsActors) {
                    ((DefaultListModel<Person>) lsAllActors.getModel()).add(0, add);
                    actors.remove(add);
                    loadActorsModel();
                    return true;
                }
            } catch (Exception ex) {
                Logger.getLogger(JoinPersonMoviePanel.class.getName()).log(Level.SEVERE, null, ex);
            }

            return false;
        }

    }
}
